{"ast":null,"code":"import{FlipType}from\"../ImageManipulator.types\";import{getContext}from\"../utils/getContext.web\";export default(function(canvas,flip){var xFlip=flip===FlipType.Horizontal;var yFlip=flip===FlipType.Vertical;var result=document.createElement('canvas');result.width=canvas.width;result.height=canvas.height;var context=getContext(result);context.translate(canvas.width/2,canvas.height/2);var xScale=xFlip?-1:1;var yScale=yFlip?-1:1;context.scale(xScale,yScale);context.drawImage(canvas,-canvas.width/2,-canvas.height/2,canvas.width,canvas.height);return result;});","map":{"version":3,"sources":["../../src/actions/FlipAction.web.ts"],"names":[],"mappings":"AAAA,OAAqB,QAAQ,iCAC7B,OAAS,UAAU,+BAEnB,eAAe,SAAC,MAAyB,CAAE,IAAwB,CAAI,CACrE,GAAM,CAAA,KAAK,CAAG,IAAI,GAAK,QAAQ,CAAC,UAAU,CAC1C,GAAM,CAAA,KAAK,CAAG,IAAI,GAAK,QAAQ,CAAC,QAAQ,CAExC,GAAM,CAAA,MAAM,CAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAC/C,MAAM,CAAC,KAAK,CAAG,MAAM,CAAC,KAAK,CAC3B,MAAM,CAAC,MAAM,CAAG,MAAM,CAAC,MAAM,CAE7B,GAAM,CAAA,OAAO,CAAG,UAAU,CAAC,MAAM,CAAC,CAGlC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAG,CAAC,CAAE,MAAM,CAAC,MAAM,CAAG,CAAC,CAAC,CAGtD,GAAM,CAAA,MAAM,CAAG,KAAK,CAAG,CAAC,CAAC,CAAG,CAAC,CAC7B,GAAM,CAAA,MAAM,CAAG,KAAK,CAAG,CAAC,CAAC,CAAG,CAAC,CAC7B,OAAO,CAAC,KAAK,CAAC,MAAM,CAAE,MAAM,CAAC,CAG7B,OAAO,CAAC,SAAS,CAAC,MAAM,CAAE,CAAC,MAAM,CAAC,KAAK,CAAG,CAAC,CAAE,CAAC,MAAM,CAAC,MAAM,CAAG,CAAC,CAAE,MAAM,CAAC,KAAK,CAAE,MAAM,CAAC,MAAM,CAAC,CAE7F,MAAO,CAAA,MAAM,CACf,CAAC","sourcesContent":["import { ActionFlip, FlipType } from '../ImageManipulator.types';\nimport { getContext } from '../utils/getContext.web';\n\nexport default (canvas: HTMLCanvasElement, flip: ActionFlip['flip']) => {\n  const xFlip = flip === FlipType.Horizontal;\n  const yFlip = flip === FlipType.Vertical;\n\n  const result = document.createElement('canvas');\n  result.width = canvas.width;\n  result.height = canvas.height;\n\n  const context = getContext(result);\n\n  // Set the origin to the center of the image\n  context.translate(canvas.width / 2, canvas.height / 2);\n\n  // Flip/flop the canvas\n  const xScale = xFlip ? -1 : 1;\n  const yScale = yFlip ? -1 : 1;\n  context.scale(xScale, yScale);\n\n  // Draw the image\n  context.drawImage(canvas, -canvas.width / 2, -canvas.height / 2, canvas.width, canvas.height);\n\n  return result;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}