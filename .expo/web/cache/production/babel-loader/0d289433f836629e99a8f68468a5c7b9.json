{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import{Platform}from'expo-modules-core';import{getRecoveryPropsToSave}from\"./ErroRecoveryStore\";import ExpoErrorRecovery from\"./ExpoErrorRecovery\";if(Platform.OS!=='web'){var globalHandler=ErrorUtils.getGlobalHandler();ErrorUtils.setGlobalHandler(function(){var _ref=_asyncToGenerator(function*(error,isFatal){if(ExpoErrorRecovery.saveRecoveryProps){yield ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());}globalHandler(error,isFatal);});return function(_x,_x2){return _ref.apply(this,arguments);};}());}else if(Platform.OS==='web'&&Platform.isDOMAvailable){window.addEventListener('error',function(){ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());});}","map":{"version":3,"sources":["../src/ErrorRecovery.fx.ts"],"names":[],"mappings":"uEAAA,OAAS,QAAQ,KAAQ,mBAAmB,CAE5C,OAAS,sBAAsB,2BAC/B,MAAO,CAAA,iBAAiB,2BAExB,GAAI,QAAQ,CAAC,EAAE,GAAK,KAAK,CAAE,CACzB,GAAM,CAAA,aAAa,CAAG,UAAU,CAAC,gBAAgB,CAAA,CAAE,CAGnD,UAAU,CAAC,gBAAgB,gBAAA,IAAA,CAAA,iBAAA,CAAC,UAAO,KAAK,CAAE,OAAO,CAAI,CACnD,GAAI,iBAAiB,CAAC,iBAAiB,CAAE,CACvC,KAAM,CAAA,iBAAiB,CAAC,iBAAiB,CAAC,sBAAsB,CAAA,CAAE,CAAC,CACpE,CACD,aAAa,CAAC,KAAK,CAAE,OAAO,CAAC,CAC/B,CAAC,kBAAA,EAAA,CAAA,GAAA,SAAA,IAAA,CAAA,KAAA,MAAA,SAAA,QAAC,C,CACH,IAAM,IAAI,QAAQ,CAAC,EAAE,GAAK,KAAK,EAAI,QAAQ,CAAC,cAAc,CAAE,CAC3D,MAAM,CAAC,gBAAgB,CAAC,OAAO,CAAE,UAAK,CACpC,iBAAiB,CAAC,iBAAiB,CAAC,sBAAsB,CAAA,CAAE,CAAC,CAC/D,CAAC,CAAC,CACH","sourcesContent":["import { Platform } from 'expo-modules-core';\n\nimport { getRecoveryPropsToSave } from './ErroRecoveryStore';\nimport ExpoErrorRecovery from './ExpoErrorRecovery';\n\nif (Platform.OS !== 'web') {\n  const globalHandler = ErrorUtils.getGlobalHandler();\n  // ErrorUtils came from react-native\n  // https://github.com/facebook/react-native/blob/1151c096dab17e5d9a6ac05b61aacecd4305f3db/Libraries/vendor/core/ErrorUtils.js#L25\n  ErrorUtils.setGlobalHandler(async (error, isFatal) => {\n    if (ExpoErrorRecovery.saveRecoveryProps) {\n      await ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());\n    }\n    globalHandler(error, isFatal);\n  });\n} else if (Platform.OS === 'web' && Platform.isDOMAvailable) {\n  window.addEventListener('error', () => {\n    ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}