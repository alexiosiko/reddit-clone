{"ast":null,"code":"import{getContext}from\"../utils/getContext.web\";function resampleSingle(canvas,width,height){var resizeCanvas=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;var result=document.createElement('canvas');result.width=canvas.width;result.height=canvas.height;var widthSource=canvas.width;var heightSource=canvas.height;width=Math.round(width);height=Math.round(height);var wRatio=widthSource/width;var hRatio=heightSource/height;var wRatioHalf=Math.ceil(wRatio/2);var hRatioHalf=Math.ceil(hRatio/2);var ctx=getContext(canvas);var img=ctx.getImageData(0,0,widthSource,heightSource);var img2=ctx.createImageData(width,height);var data=img.data;var data2=img2.data;for(var j=0;j<height;j++){for(var i=0;i<width;i++){var x2=(i+j*width)*4;var weight=0;var weights=0;var weightsAlpha=0;var gx_r=0;var gx_g=0;var gx_b=0;var gx_a=0;var yCenter=(j+0.5)*hRatio;var yy_start=Math.floor(j*hRatio);var yy_stop=Math.ceil((j+1)*hRatio);for(var yy=yy_start;yy<yy_stop;yy++){var dy=Math.abs(yCenter-(yy+0.5))/hRatioHalf;var center_x=(i+0.5)*wRatio;var w0=dy*dy;var xx_start=Math.floor(i*wRatio);var xx_stop=Math.ceil((i+1)*wRatio);for(var xx=xx_start;xx<xx_stop;xx++){var dx=Math.abs(center_x-(xx+0.5))/wRatioHalf;var w=Math.sqrt(w0+dx*dx);if(w>=1){continue;}weight=2*w*w*w-3*w*w+1;var xPosition=4*(xx+yy*widthSource);gx_a+=weight*data[xPosition+3];weightsAlpha+=weight;if(data[xPosition+3]<255){weight=weight*data[xPosition+3]/250;}gx_r+=weight*data[xPosition];gx_g+=weight*data[xPosition+1];gx_b+=weight*data[xPosition+2];weights+=weight;}}data2[x2]=gx_r/weights;data2[x2+1]=gx_g/weights;data2[x2+2]=gx_b/weights;data2[x2+3]=gx_a/weightsAlpha;}}if(resizeCanvas){result.width=width;result.height=height;}var context=getContext(result);context.putImageData(img2,0,0);return result;}export default(function(canvas,_ref){var width=_ref.width,height=_ref.height;var imageRatio=canvas.width/canvas.height;var requestedWidth=0;var requestedHeight=0;if(width!==undefined){requestedWidth=width;requestedHeight=requestedWidth/imageRatio;}if(height!==undefined){requestedHeight=height;if(requestedWidth===0){requestedWidth=requestedHeight*imageRatio;}}return resampleSingle(canvas,requestedWidth,requestedHeight,true);});","map":{"version":3,"sources":["../../src/actions/ResizeAction.web.ts"],"names":[],"mappings":"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","sourcesContent":["import { ActionResize } from '../ImageManipulator.types';\nimport { getContext } from '../utils/getContext.web';\n\n/**\n * Hermite resize - fast image resize/resample using Hermite filter. 1 cpu version!\n * https://stackoverflow.com/a/18320662/4047926\n *\n * @param {HTMLCanvasElement} canvas\n * @param {int} width\n * @param {int} height\n * @param {boolean} resizeCanvas if true, canvas will be resized. Optional.\n */\nfunction resampleSingle(\n  canvas: HTMLCanvasElement,\n  width: number,\n  height: number,\n  resizeCanvas: boolean = false\n): HTMLCanvasElement {\n  const result = document.createElement('canvas');\n  result.width = canvas.width;\n  result.height = canvas.height;\n\n  const widthSource = canvas.width;\n  const heightSource = canvas.height;\n  width = Math.round(width);\n  height = Math.round(height);\n\n  const wRatio = widthSource / width;\n  const hRatio = heightSource / height;\n  const wRatioHalf = Math.ceil(wRatio / 2);\n  const hRatioHalf = Math.ceil(hRatio / 2);\n\n  const ctx = getContext(canvas);\n\n  const img = ctx.getImageData(0, 0, widthSource, heightSource);\n  const img2 = ctx.createImageData(width, height);\n  const data = img.data;\n  const data2 = img2.data;\n\n  for (let j = 0; j < height; j++) {\n    for (let i = 0; i < width; i++) {\n      const x2 = (i + j * width) * 4;\n      let weight = 0;\n      let weights = 0;\n      let weightsAlpha = 0;\n      let gx_r = 0;\n      let gx_g = 0;\n      let gx_b = 0;\n      let gx_a = 0;\n      const yCenter = (j + 0.5) * hRatio;\n      const yy_start = Math.floor(j * hRatio);\n      const yy_stop = Math.ceil((j + 1) * hRatio);\n      for (let yy = yy_start; yy < yy_stop; yy++) {\n        const dy = Math.abs(yCenter - (yy + 0.5)) / hRatioHalf;\n        const center_x = (i + 0.5) * wRatio;\n        const w0 = dy * dy; //pre-calc part of w\n        const xx_start = Math.floor(i * wRatio);\n        const xx_stop = Math.ceil((i + 1) * wRatio);\n        for (let xx = xx_start; xx < xx_stop; xx++) {\n          const dx = Math.abs(center_x - (xx + 0.5)) / wRatioHalf;\n          const w = Math.sqrt(w0 + dx * dx);\n          if (w >= 1) {\n            //pixel too far\n            continue;\n          }\n          //hermite filter\n          weight = 2 * w * w * w - 3 * w * w + 1;\n          const xPosition = 4 * (xx + yy * widthSource);\n          //alpha\n          gx_a += weight * data[xPosition + 3];\n          weightsAlpha += weight;\n          //colors\n          if (data[xPosition + 3] < 255) {\n            weight = (weight * data[xPosition + 3]) / 250;\n          }\n          gx_r += weight * data[xPosition];\n          gx_g += weight * data[xPosition + 1];\n          gx_b += weight * data[xPosition + 2];\n          weights += weight;\n        }\n      }\n      data2[x2] = gx_r / weights;\n      data2[x2 + 1] = gx_g / weights;\n      data2[x2 + 2] = gx_b / weights;\n      data2[x2 + 3] = gx_a / weightsAlpha;\n    }\n  }\n\n  //resize canvas\n  if (resizeCanvas) {\n    result.width = width;\n    result.height = height;\n  }\n\n  //draw\n  const context = getContext(result);\n  context.putImageData(img2, 0, 0);\n\n  return result;\n}\n\nexport default (canvas: HTMLCanvasElement, { width, height }: ActionResize['resize']) => {\n  const imageRatio = canvas.width / canvas.height;\n\n  let requestedWidth: number = 0;\n  let requestedHeight: number = 0;\n  if (width !== undefined) {\n    requestedWidth = width;\n    requestedHeight = requestedWidth / imageRatio;\n  }\n  if (height !== undefined) {\n    requestedHeight = height;\n    if (requestedWidth === 0) {\n      requestedWidth = requestedHeight * imageRatio;\n    }\n  }\n\n  return resampleSingle(canvas, requestedWidth, requestedHeight, true);\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}