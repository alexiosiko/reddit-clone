{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import{crop,flip,resize,rotate}from\"./actions/index.web\";import{getContext}from\"./utils/getContext.web\";function getResults(canvas,options){var uri;if(options){var _options$compress;var _options$format=options.format,format=_options$format===void 0?'png':_options$format;if(options.format==='png'&&options.compress!==undefined){console.warn('compress is not supported with png format.');}var quality=Math.min(1,Math.max(0,(_options$compress=options.compress)!=null?_options$compress:1));uri=canvas.toDataURL('image/'+format,quality);}else{uri=canvas.toDataURL();}return{uri:uri,width:canvas.width,height:canvas.height,base64:uri.replace(/^data:image\\/\\w+;base64,/,'')};}function loadImageAsync(uri){return new Promise(function(resolve,reject){var imageSource=new Image();imageSource.crossOrigin='anonymous';var canvas=document.createElement('canvas');imageSource.onload=function(){canvas.width=imageSource.naturalWidth;canvas.height=imageSource.naturalHeight;var context=getContext(canvas);context.drawImage(imageSource,0,0,imageSource.naturalWidth,imageSource.naturalHeight);resolve(canvas);};imageSource.onerror=function(){return reject(canvas);};imageSource.src=uri;});}export default{get name(){return'ExpoImageManipulator';},manipulateAsync:function(){var _manipulateAsync=_asyncToGenerator(function*(uri){var actions=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];var options=arguments.length>2?arguments[2]:undefined;var originalCanvas=yield loadImageAsync(uri);var resultCanvas=actions.reduce(function(canvas,action){if('crop'in action){return crop(canvas,action.crop);}else if('resize'in action){return resize(canvas,action.resize);}else if('flip'in action){return flip(canvas,action.flip);}else if('rotate'in action){return rotate(canvas,action.rotate);}else{return canvas;}},originalCanvas);return getResults(resultCanvas,options);});function manipulateAsync(_x){return _manipulateAsync.apply(this,arguments);}return manipulateAsync;}()};","map":{"version":3,"sources":["../src/ExpoImageManipulator.web.ts"],"names":[],"mappings":"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","sourcesContent":["import { ImageResult, SaveOptions, Action } from './ImageManipulator.types';\nimport { crop, flip, resize, rotate } from './actions/index.web';\nimport { getContext } from './utils/getContext.web';\n\nfunction getResults(canvas: HTMLCanvasElement, options?: SaveOptions): ImageResult {\n  let uri: string;\n  if (options) {\n    const { format = 'png' } = options;\n    if (options.format === 'png' && options.compress !== undefined) {\n      console.warn('compress is not supported with png format.');\n    }\n    const quality = Math.min(1, Math.max(0, options.compress ?? 1));\n    uri = canvas.toDataURL('image/' + format, quality);\n  } else {\n    // defaults to PNG with no loss\n    uri = canvas.toDataURL();\n  }\n  return {\n    uri,\n    width: canvas.width,\n    height: canvas.height,\n    base64: uri.replace(/^data:image\\/\\w+;base64,/, ''),\n  };\n}\n\nfunction loadImageAsync(uri: string): Promise<HTMLCanvasElement> {\n  return new Promise((resolve, reject) => {\n    const imageSource = new Image();\n    imageSource.crossOrigin = 'anonymous';\n    const canvas = document.createElement('canvas');\n    imageSource.onload = () => {\n      canvas.width = imageSource.naturalWidth;\n      canvas.height = imageSource.naturalHeight;\n\n      const context = getContext(canvas);\n      context.drawImage(imageSource, 0, 0, imageSource.naturalWidth, imageSource.naturalHeight);\n\n      resolve(canvas);\n    };\n    imageSource.onerror = () => reject(canvas);\n    imageSource.src = uri;\n  });\n}\n\nexport default {\n  get name(): string {\n    return 'ExpoImageManipulator';\n  },\n  async manipulateAsync(\n    uri: string,\n    actions: Action[] = [],\n    options: SaveOptions\n  ): Promise<ImageResult> {\n    const originalCanvas = await loadImageAsync(uri);\n\n    const resultCanvas = actions.reduce((canvas, action) => {\n      if ('crop' in action) {\n        return crop(canvas, action.crop);\n      } else if ('resize' in action) {\n        return resize(canvas, action.resize);\n      } else if ('flip' in action) {\n        return flip(canvas, action.flip);\n      } else if ('rotate' in action) {\n        return rotate(canvas, action.rotate);\n      } else {\n        return canvas;\n      }\n    }, originalCanvas);\n\n    return getResults(resultCanvas, options);\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}