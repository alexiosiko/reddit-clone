{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import{EventEmitter}from'expo-modules-core';import React,{useEffect,useState,useRef,useMemo}from'react';import Animated from\"react-native-web/dist/exports/Animated\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import Text from\"react-native-web/dist/exports/Text\";import Platform from\"react-native-web/dist/exports/Platform\";import View from\"react-native-web/dist/exports/View\";import DevLoadingViewNativeModule from\"./DevLoadingViewNativeModule\";import{getInitialSafeArea}from\"./getInitialSafeArea\";export default function DevLoadingView(){var _useState=useState('Refreshing...'),_useState2=_slicedToArray(_useState,2),message=_useState2[0],setMessage=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isDevLoading=_useState4[0],setIsDevLoading=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),isAnimating=_useState6[0],setIsAnimating=_useState6[1];var translateY=useRef(new Animated.Value(0)).current;var emitter=useMemo(function(){try{return new EventEmitter(DevLoadingViewNativeModule);}catch(error){throw new Error('Failed to instantiate native emitter in `DevLoadingView` because the native module `DevLoadingView` is undefined: '+error.message);}},[]);useEffect(function(){if(!emitter)return;function handleShowMessage(event){setMessage(event.message);translateY.setValue(0);setIsDevLoading(true);}function handleHide(){setIsAnimating(true);setIsDevLoading(false);Animated.timing(translateY,{toValue:150,delay:1000,duration:350,useNativeDriver:Platform.OS!=='web'}).start(function(_ref){var finished=_ref.finished;if(finished){setIsAnimating(false);translateY.setValue(0);}});}var showMessageSubscription=emitter.addListener('devLoadingView:showMessage',handleShowMessage);var hideSubscription=emitter.addListener('devLoadingView:hide',handleHide);return function cleanup(){showMessageSubscription.remove();hideSubscription.remove();};},[translateY,emitter]);if(!isDevLoading&&!isAnimating){return null;}return React.createElement(Animated.View,{style:[styles.animatedContainer,{transform:[{translateY:translateY}]}],pointerEvents:\"none\"},React.createElement(View,{style:styles.banner},React.createElement(View,{style:styles.contentContainer},React.createElement(View,{style:{flexDirection:'row'}},React.createElement(Text,{style:styles.text},message)),React.createElement(View,{style:{flex:1}},React.createElement(Text,{style:styles.subtitle},isDevLoading?'Using Fast Refresh':\"Don't see your changes? Reload the app\")))));}var styles=StyleSheet.create({animatedContainer:{position:'absolute',bottom:0,left:0,right:0,zIndex:42},banner:{flex:1,overflow:'visible',backgroundColor:'rgba(0,0,0,0.75)',paddingBottom:getInitialSafeArea().bottom},contentContainer:{flex:1,paddingTop:10,paddingBottom:5,alignItems:'center',justifyContent:'center',textAlign:'center'},text:{color:'#fff',fontSize:15},subtitle:{color:'rgba(255,255,255,0.8)'}});","map":{"version":3,"sources":["../../src/environment/DevLoadingView.tsx"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from 'expo-modules-core';\nimport React, { useEffect, useState, useRef, useMemo } from 'react';\nimport { Animated, StyleSheet, Text, Platform, View } from 'react-native';\n\nimport DevLoadingViewNativeModule from './DevLoadingViewNativeModule';\nimport { getInitialSafeArea } from './getInitialSafeArea';\n\nexport default function DevLoadingView() {\n  const [message, setMessage] = useState('Refreshing...');\n  const [isDevLoading, setIsDevLoading] = useState(false);\n  const [isAnimating, setIsAnimating] = useState(false);\n  const translateY = useRef(new Animated.Value(0)).current;\n  const emitter = useMemo<EventEmitter>(() => {\n    try {\n      return new EventEmitter(DevLoadingViewNativeModule);\n    } catch (error) {\n      throw new Error(\n        'Failed to instantiate native emitter in `DevLoadingView` because the native module `DevLoadingView` is undefined: ' +\n          error.message\n      );\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!emitter) return;\n\n    function handleShowMessage(event: { message: string }) {\n      setMessage(event.message);\n      // TODO: if we show the refreshing banner and don't get a hide message\n      // for 3 seconds, warn the user that it's taking a while and suggest\n      // they reload\n\n      translateY.setValue(0);\n      setIsDevLoading(true);\n    }\n\n    function handleHide() {\n      // TODO: if we showed the 'refreshing' banner less than 250ms ago, delay\n      // switching to the 'finished' banner\n\n      setIsAnimating(true);\n      setIsDevLoading(false);\n      Animated.timing(translateY, {\n        toValue: 150,\n        delay: 1000,\n        duration: 350,\n        useNativeDriver: Platform.OS !== 'web',\n      }).start(({ finished }) => {\n        if (finished) {\n          setIsAnimating(false);\n          translateY.setValue(0);\n        }\n      });\n    }\n\n    const showMessageSubscription = emitter.addListener(\n      'devLoadingView:showMessage',\n      handleShowMessage\n    );\n    const hideSubscription = emitter.addListener('devLoadingView:hide', handleHide);\n\n    return function cleanup() {\n      showMessageSubscription.remove();\n      hideSubscription.remove();\n    };\n  }, [translateY, emitter]);\n\n  if (!isDevLoading && !isAnimating) {\n    return null;\n  }\n\n  return (\n    <Animated.View\n      style={[styles.animatedContainer, { transform: [{ translateY }] }]}\n      pointerEvents=\"none\">\n      <View style={styles.banner}>\n        <View style={styles.contentContainer}>\n          <View style={{ flexDirection: 'row' }}>\n            <Text style={styles.text}>{message}</Text>\n          </View>\n\n          <View style={{ flex: 1 }}>\n            <Text style={styles.subtitle}>\n              {isDevLoading ? 'Using Fast Refresh' : \"Don't see your changes? Reload the app\"}\n            </Text>\n          </View>\n        </View>\n      </View>\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  animatedContainer: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    right: 0,\n    zIndex: 42, // arbitrary\n  },\n\n  banner: {\n    flex: 1,\n    overflow: 'visible',\n    backgroundColor: 'rgba(0,0,0,0.75)',\n    paddingBottom: getInitialSafeArea().bottom,\n  },\n  contentContainer: {\n    flex: 1,\n    paddingTop: 10,\n    paddingBottom: 5,\n    alignItems: 'center',\n    justifyContent: 'center',\n    textAlign: 'center',\n  },\n  text: {\n    color: '#fff',\n    fontSize: 15,\n  },\n  subtitle: {\n    color: 'rgba(255,255,255,0.8)',\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}