{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";var _excluded=[\"format\"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import{UnavailabilityError}from'expo-modules-core';import ExpoImageManipulator from\"./ExpoImageManipulator\";import{SaveFormat}from\"./ImageManipulator.types\";import{validateArguments}from\"./validators\";export function manipulateAsync(_x){return _manipulateAsync.apply(this,arguments);}function _manipulateAsync(){_manipulateAsync=_asyncToGenerator(function*(uri){var actions=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];var saveOptions=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};if(!ExpoImageManipulator.manipulateAsync){throw new UnavailabilityError('ImageManipulator','manipulateAsync');}validateArguments(uri,actions,saveOptions);var _saveOptions$format=saveOptions.format,format=_saveOptions$format===void 0?SaveFormat.JPEG:_saveOptions$format,rest=_objectWithoutProperties(saveOptions,_excluded);return yield ExpoImageManipulator.manipulateAsync(uri,actions,_objectSpread({format:format},rest));});return _manipulateAsync.apply(this,arguments);}export*from\"./ImageManipulator.types\";","map":{"version":3,"sources":["../src/ImageManipulator.ts"],"names":[],"mappings":"6/BAAA,OAAS,mBAAmB,KAAQ,mBAAmB,CAEvD,MAAO,CAAA,oBAAoB,8BAC3B,OAA8B,UAAU,gCACxC,OAAS,iBAAiB,oBAc1B,eAAsB,CAAA,eAAe,CAAA,EAAA,SAAA,gBAAA,CAAA,KAAA,MAAA,SAAA,GAapC,SAAA,iBAAA,EAAA,gBAAA,CAAA,iBAAA,CAbM,UACL,GAAW,CAEkB,IAD7B,CAAA,OAAA,CAAA,SAAA,CAAA,MAAA,IAAA,SAAA,MAAA,SAAA,CAAA,SAAA,IAAoB,EAAE,IACtB,CAAA,WAAA,CAAA,SAAA,CAAA,MAAA,IAAA,SAAA,MAAA,SAAA,CAAA,SAAA,IAA2B,CAAA,CAAE,CAE7B,GAAI,CAAC,oBAAoB,CAAC,eAAe,CAAE,CACzC,KAAM,IAAI,CAAA,mBAAmB,CAAC,kBAAkB,CAAE,iBAAiB,CAAC,CACrE,CAED,iBAAiB,CAAC,GAAG,CAAE,OAAO,CAAE,WAAW,CAAC,CAE5C,IAAA,mBAAA,CAA8C,WAAW,CAAjD,MAAM,CAAN,MAAM,CAAA,mBAAA,UAAG,UAAU,CAAC,IAAI,CAAA,mBAAA,CAAK,IAAI,CAAA,wBAAA,CAAK,WAAW,CAAA,SAAA,EACzD,YAAa,CAAA,oBAAoB,CAAC,eAAe,CAAC,GAAG,CAAE,OAAO,CAAA,aAAA,EAAI,MAAM,CAAN,MAAM,EAAK,IAAI,CAAE,CAAC,CACtF,CAAC,SAAA,gBAAA,CAAA,KAAA,MAAA,SAAA,GAED","sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoImageManipulator from './ExpoImageManipulator';\nimport { Action, ImageResult, SaveFormat, SaveOptions } from './ImageManipulator.types';\nimport { validateArguments } from './validators';\n\n// @needsAudit\n/**\n * Manipulate the image provided via `uri`. Available modifications are rotating, flipping (mirroring),\n * resizing and cropping. Each invocation results in a new file. With one invocation you can provide\n * a set of actions to perform over the image. Overwriting the source file would not have an effect\n * in displaying the result as images are cached.\n * @param uri URI of the file to manipulate. Should be on the local file system or a base64 data URI.\n * @param actions An array of objects representing manipulation options. Each object should have\n * __only one__ of the keys that corresponds to specific transformation.\n * @param saveOptions A map defining how modified image should be saved.\n * @return Promise which fulfils with [`ImageResult`](#imageresult) object.\n */\nexport async function manipulateAsync(\n  uri: string,\n  actions: Action[] = [],\n  saveOptions: SaveOptions = {}\n): Promise<ImageResult> {\n  if (!ExpoImageManipulator.manipulateAsync) {\n    throw new UnavailabilityError('ImageManipulator', 'manipulateAsync');\n  }\n\n  validateArguments(uri, actions, saveOptions);\n\n  const { format = SaveFormat.JPEG, ...rest } = saveOptions;\n  return await ExpoImageManipulator.manipulateAsync(uri, actions, { format, ...rest });\n}\n\nexport * from './ImageManipulator.types';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}