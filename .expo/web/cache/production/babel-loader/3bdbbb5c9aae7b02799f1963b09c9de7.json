{"ast":null,"code":"import{CodedError}from'expo-modules-core';import{getContext}from\"../utils/getContext.web\";export default(function(canvas,options){var _options$originX=options.originX,originX=_options$originX===void 0?0:_options$originX,_options$originY=options.originY,originY=_options$originY===void 0?0:_options$originY,_options$width=options.width,width=_options$width===void 0?0:_options$width,_options$height=options.height,height=_options$height===void 0?0:_options$height;var clamp=function clamp(value,max){return Math.max(0,Math.min(max,value));};width=clamp(width,canvas.width);height=clamp(height,canvas.height);originX=clamp(originX,canvas.width);originY=clamp(originY,canvas.height);width=Math.min(originX+width,canvas.width)-originX;height=Math.min(originY+height,canvas.height)-originY;if(width===0||height===0){throw new CodedError('ERR_IMAGE_MANIPULATOR_CROP','Crop size must be greater than 0: '+JSON.stringify(options,null,2));}var result=document.createElement('canvas');result.width=width;result.height=height;var context=getContext(result);context.drawImage(canvas,originX,originY,width,height,0,0,width,height);return result;});","map":{"version":3,"sources":["../../src/actions/CropAction.web.ts"],"names":[],"mappings":"AAAA,OAAS,UAAU,KAAQ,mBAAmB,CAG9C,OAAS,UAAU,+BAEnB,eAAe,SAAC,MAAyB,CAAE,OAA2B,CAAI,CAExE,IAAA,gBAAA,CAA0D,OAAO,CAA3D,OAAO,CAAP,OAAO,CAAA,gBAAA,UAAG,CAAC,CAAA,gBAAA,CAAA,gBAAA,CAAyC,OAAO,CAA9C,OAAO,CAAP,OAAO,CAAA,gBAAA,UAAG,CAAC,CAAA,gBAAA,CAAA,cAAA,CAA4B,OAAO,CAAjC,KAAK,CAAL,KAAK,CAAA,cAAA,UAAG,CAAC,CAAA,cAAA,CAAA,eAAA,CAAiB,OAAO,CAAtB,MAAM,CAAN,MAAM,CAAA,eAAA,UAAG,CAAC,CAAA,eAAA,CACrD,GAAM,CAAA,KAAK,CAAG,QAAR,CAAA,KAAK,CAAI,KAAK,CAAE,GAAG,QAAK,CAAA,IAAI,CAAC,GAAG,CAAC,CAAC,CAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAE,KAAK,CAAC,CAAC,GAE/D,KAAK,CAAG,KAAK,CAAC,KAAK,CAAE,MAAM,CAAC,KAAK,CAAC,CAClC,MAAM,CAAG,KAAK,CAAC,MAAM,CAAE,MAAM,CAAC,MAAM,CAAC,CACrC,OAAO,CAAG,KAAK,CAAC,OAAO,CAAE,MAAM,CAAC,KAAK,CAAC,CACtC,OAAO,CAAG,KAAK,CAAC,OAAO,CAAE,MAAM,CAAC,MAAM,CAAC,CAGvC,KAAK,CAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAG,KAAK,CAAE,MAAM,CAAC,KAAK,CAAC,CAAG,OAAO,CACzD,MAAM,CAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAG,MAAM,CAAE,MAAM,CAAC,MAAM,CAAC,CAAG,OAAO,CAE5D,GAAI,KAAK,GAAK,CAAC,EAAI,MAAM,GAAK,CAAC,CAAE,CAC/B,KAAM,IAAI,CAAA,UAAU,CAClB,4BAA4B,CAC5B,oCAAoC,CAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAE,IAAI,CAAE,CAAC,CAAC,CACxE,CACF,CAED,GAAM,CAAA,MAAM,CAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAC/C,MAAM,CAAC,KAAK,CAAG,KAAK,CACpB,MAAM,CAAC,MAAM,CAAG,MAAM,CAEtB,GAAM,CAAA,OAAO,CAAG,UAAU,CAAC,MAAM,CAAC,CAClC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAE,OAAO,CAAE,OAAO,CAAE,KAAK,CAAE,MAAM,CAAE,CAAC,CAAE,CAAC,CAAE,KAAK,CAAE,MAAM,CAAC,CAE/E,MAAO,CAAA,MAAM,CACf,CAAC","sourcesContent":["import { CodedError } from 'expo-modules-core';\n\nimport { ActionCrop } from '../ImageManipulator.types';\nimport { getContext } from '../utils/getContext.web';\n\nexport default (canvas: HTMLCanvasElement, options: ActionCrop['crop']) => {\n  // ensure values are defined.\n  let { originX = 0, originY = 0, width = 0, height = 0 } = options;\n  const clamp = (value, max) => Math.max(0, Math.min(max, value));\n  // lock within bounds.\n  width = clamp(width, canvas.width);\n  height = clamp(height, canvas.height);\n  originX = clamp(originX, canvas.width);\n  originY = clamp(originY, canvas.height);\n\n  // lock sum of crop.\n  width = Math.min(originX + width, canvas.width) - originX;\n  height = Math.min(originY + height, canvas.height) - originY;\n\n  if (width === 0 || height === 0) {\n    throw new CodedError(\n      'ERR_IMAGE_MANIPULATOR_CROP',\n      'Crop size must be greater than 0: ' + JSON.stringify(options, null, 2)\n    );\n  }\n\n  const result = document.createElement('canvas');\n  result.width = width;\n  result.height = height;\n\n  const context = getContext(result);\n  context.drawImage(canvas, originX, originY, width, height, 0, 0, width, height);\n\n  return result;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}