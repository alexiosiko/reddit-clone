{"ast":null,"code":"import { getContext } from \"../utils/getContext.web\";\nfunction resampleSingle(canvas, width, height) {\n  var resizeCanvas = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var result = document.createElement('canvas');\n  result.width = canvas.width;\n  result.height = canvas.height;\n  var widthSource = canvas.width;\n  var heightSource = canvas.height;\n  width = Math.round(width);\n  height = Math.round(height);\n  var wRatio = widthSource / width;\n  var hRatio = heightSource / height;\n  var wRatioHalf = Math.ceil(wRatio / 2);\n  var hRatioHalf = Math.ceil(hRatio / 2);\n  var ctx = getContext(canvas);\n  var img = ctx.getImageData(0, 0, widthSource, heightSource);\n  var img2 = ctx.createImageData(width, height);\n  var data = img.data;\n  var data2 = img2.data;\n  for (var j = 0; j < height; j++) {\n    for (var i = 0; i < width; i++) {\n      var x2 = (i + j * width) * 4;\n      var weight = 0;\n      var weights = 0;\n      var weightsAlpha = 0;\n      var gx_r = 0;\n      var gx_g = 0;\n      var gx_b = 0;\n      var gx_a = 0;\n      var yCenter = (j + 0.5) * hRatio;\n      var yy_start = Math.floor(j * hRatio);\n      var yy_stop = Math.ceil((j + 1) * hRatio);\n      for (var yy = yy_start; yy < yy_stop; yy++) {\n        var dy = Math.abs(yCenter - (yy + 0.5)) / hRatioHalf;\n        var center_x = (i + 0.5) * wRatio;\n        var w0 = dy * dy;\n        var xx_start = Math.floor(i * wRatio);\n        var xx_stop = Math.ceil((i + 1) * wRatio);\n        for (var xx = xx_start; xx < xx_stop; xx++) {\n          var dx = Math.abs(center_x - (xx + 0.5)) / wRatioHalf;\n          var w = Math.sqrt(w0 + dx * dx);\n          if (w >= 1) {\n            continue;\n          }\n          weight = 2 * w * w * w - 3 * w * w + 1;\n          var xPosition = 4 * (xx + yy * widthSource);\n          gx_a += weight * data[xPosition + 3];\n          weightsAlpha += weight;\n          if (data[xPosition + 3] < 255) {\n            weight = weight * data[xPosition + 3] / 250;\n          }\n          gx_r += weight * data[xPosition];\n          gx_g += weight * data[xPosition + 1];\n          gx_b += weight * data[xPosition + 2];\n          weights += weight;\n        }\n      }\n      data2[x2] = gx_r / weights;\n      data2[x2 + 1] = gx_g / weights;\n      data2[x2 + 2] = gx_b / weights;\n      data2[x2 + 3] = gx_a / weightsAlpha;\n    }\n  }\n  if (resizeCanvas) {\n    result.width = width;\n    result.height = height;\n  }\n  var context = getContext(result);\n  context.putImageData(img2, 0, 0);\n  return result;\n}\nexport default (function (canvas, _ref) {\n  var width = _ref.width,\n    height = _ref.height;\n  var imageRatio = canvas.width / canvas.height;\n  var requestedWidth = 0;\n  var requestedHeight = 0;\n  if (width !== undefined) {\n    requestedWidth = width;\n    requestedHeight = requestedWidth / imageRatio;\n  }\n  if (height !== undefined) {\n    requestedHeight = height;\n    if (requestedWidth === 0) {\n      requestedWidth = requestedHeight * imageRatio;\n    }\n  }\n  return resampleSingle(canvas, requestedWidth, requestedHeight, true);\n});","map":{"version":3,"sources":["../../src/actions/ResizeAction.web.ts"],"names":[],"mappings":"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","sourcesContent":["import { ActionResize } from '../ImageManipulator.types';\nimport { getContext } from '../utils/getContext.web';\n\n/**\n * Hermite resize - fast image resize/resample using Hermite filter. 1 cpu version!\n * https://stackoverflow.com/a/18320662/4047926\n *\n * @param {HTMLCanvasElement} canvas\n * @param {int} width\n * @param {int} height\n * @param {boolean} resizeCanvas if true, canvas will be resized. Optional.\n */\nfunction resampleSingle(\n  canvas: HTMLCanvasElement,\n  width: number,\n  height: number,\n  resizeCanvas: boolean = false\n): HTMLCanvasElement {\n  const result = document.createElement('canvas');\n  result.width = canvas.width;\n  result.height = canvas.height;\n\n  const widthSource = canvas.width;\n  const heightSource = canvas.height;\n  width = Math.round(width);\n  height = Math.round(height);\n\n  const wRatio = widthSource / width;\n  const hRatio = heightSource / height;\n  const wRatioHalf = Math.ceil(wRatio / 2);\n  const hRatioHalf = Math.ceil(hRatio / 2);\n\n  const ctx = getContext(canvas);\n\n  const img = ctx.getImageData(0, 0, widthSource, heightSource);\n  const img2 = ctx.createImageData(width, height);\n  const data = img.data;\n  const data2 = img2.data;\n\n  for (let j = 0; j < height; j++) {\n    for (let i = 0; i < width; i++) {\n      const x2 = (i + j * width) * 4;\n      let weight = 0;\n      let weights = 0;\n      let weightsAlpha = 0;\n      let gx_r = 0;\n      let gx_g = 0;\n      let gx_b = 0;\n      let gx_a = 0;\n      const yCenter = (j + 0.5) * hRatio;\n      const yy_start = Math.floor(j * hRatio);\n      const yy_stop = Math.ceil((j + 1) * hRatio);\n      for (let yy = yy_start; yy < yy_stop; yy++) {\n        const dy = Math.abs(yCenter - (yy + 0.5)) / hRatioHalf;\n        const center_x = (i + 0.5) * wRatio;\n        const w0 = dy * dy; //pre-calc part of w\n        const xx_start = Math.floor(i * wRatio);\n        const xx_stop = Math.ceil((i + 1) * wRatio);\n        for (let xx = xx_start; xx < xx_stop; xx++) {\n          const dx = Math.abs(center_x - (xx + 0.5)) / wRatioHalf;\n          const w = Math.sqrt(w0 + dx * dx);\n          if (w >= 1) {\n            //pixel too far\n            continue;\n          }\n          //hermite filter\n          weight = 2 * w * w * w - 3 * w * w + 1;\n          const xPosition = 4 * (xx + yy * widthSource);\n          //alpha\n          gx_a += weight * data[xPosition + 3];\n          weightsAlpha += weight;\n          //colors\n          if (data[xPosition + 3] < 255) {\n            weight = (weight * data[xPosition + 3]) / 250;\n          }\n          gx_r += weight * data[xPosition];\n          gx_g += weight * data[xPosition + 1];\n          gx_b += weight * data[xPosition + 2];\n          weights += weight;\n        }\n      }\n      data2[x2] = gx_r / weights;\n      data2[x2 + 1] = gx_g / weights;\n      data2[x2 + 2] = gx_b / weights;\n      data2[x2 + 3] = gx_a / weightsAlpha;\n    }\n  }\n\n  //resize canvas\n  if (resizeCanvas) {\n    result.width = width;\n    result.height = height;\n  }\n\n  //draw\n  const context = getContext(result);\n  context.putImageData(img2, 0, 0);\n\n  return result;\n}\n\nexport default (canvas: HTMLCanvasElement, { width, height }: ActionResize['resize']) => {\n  const imageRatio = canvas.width / canvas.height;\n\n  let requestedWidth: number = 0;\n  let requestedHeight: number = 0;\n  if (width !== undefined) {\n    requestedWidth = width;\n    requestedHeight = requestedWidth / imageRatio;\n  }\n  if (height !== undefined) {\n    requestedHeight = height;\n    if (requestedWidth === 0) {\n      requestedWidth = requestedHeight * imageRatio;\n    }\n  }\n\n  return resampleSingle(canvas, requestedWidth, requestedHeight, true);\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}