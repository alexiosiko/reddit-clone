{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { crop, flip, resize, rotate } from \"./actions/index.web\";\nimport { getContext } from \"./utils/getContext.web\";\nfunction getResults(canvas, options) {\n  var uri;\n  if (options) {\n    var _options$compress;\n    var _options$format = options.format,\n      format = _options$format === void 0 ? 'png' : _options$format;\n    if (options.format === 'png' && options.compress !== undefined) {\n      console.warn('compress is not supported with png format.');\n    }\n    var quality = Math.min(1, Math.max(0, (_options$compress = options.compress) != null ? _options$compress : 1));\n    uri = canvas.toDataURL('image/' + format, quality);\n  } else {\n    uri = canvas.toDataURL();\n  }\n  return {\n    uri: uri,\n    width: canvas.width,\n    height: canvas.height,\n    base64: uri.replace(/^data:image\\/\\w+;base64,/, '')\n  };\n}\nfunction loadImageAsync(uri) {\n  return new Promise(function (resolve, reject) {\n    var imageSource = new Image();\n    imageSource.crossOrigin = 'anonymous';\n    var canvas = document.createElement('canvas');\n    imageSource.onload = function () {\n      canvas.width = imageSource.naturalWidth;\n      canvas.height = imageSource.naturalHeight;\n      var context = getContext(canvas);\n      context.drawImage(imageSource, 0, 0, imageSource.naturalWidth, imageSource.naturalHeight);\n      resolve(canvas);\n    };\n    imageSource.onerror = function () {\n      return reject(canvas);\n    };\n    imageSource.src = uri;\n  });\n}\nexport default {\n  get name() {\n    return 'ExpoImageManipulator';\n  },\n  manipulateAsync: function () {\n    var _manipulateAsync = _asyncToGenerator(function* (uri) {\n      var actions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var options = arguments.length > 2 ? arguments[2] : undefined;\n      var originalCanvas = yield loadImageAsync(uri);\n      var resultCanvas = actions.reduce(function (canvas, action) {\n        if ('crop' in action) {\n          return crop(canvas, action.crop);\n        } else if ('resize' in action) {\n          return resize(canvas, action.resize);\n        } else if ('flip' in action) {\n          return flip(canvas, action.flip);\n        } else if ('rotate' in action) {\n          return rotate(canvas, action.rotate);\n        } else {\n          return canvas;\n        }\n      }, originalCanvas);\n      return getResults(resultCanvas, options);\n    });\n    function manipulateAsync(_x) {\n      return _manipulateAsync.apply(this, arguments);\n    }\n    return manipulateAsync;\n  }()\n};","map":{"version":3,"sources":["../src/ExpoImageManipulator.web.ts"],"names":[],"mappings":"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","sourcesContent":["import { ImageResult, SaveOptions, Action } from './ImageManipulator.types';\nimport { crop, flip, resize, rotate } from './actions/index.web';\nimport { getContext } from './utils/getContext.web';\n\nfunction getResults(canvas: HTMLCanvasElement, options?: SaveOptions): ImageResult {\n  let uri: string;\n  if (options) {\n    const { format = 'png' } = options;\n    if (options.format === 'png' && options.compress !== undefined) {\n      console.warn('compress is not supported with png format.');\n    }\n    const quality = Math.min(1, Math.max(0, options.compress ?? 1));\n    uri = canvas.toDataURL('image/' + format, quality);\n  } else {\n    // defaults to PNG with no loss\n    uri = canvas.toDataURL();\n  }\n  return {\n    uri,\n    width: canvas.width,\n    height: canvas.height,\n    base64: uri.replace(/^data:image\\/\\w+;base64,/, ''),\n  };\n}\n\nfunction loadImageAsync(uri: string): Promise<HTMLCanvasElement> {\n  return new Promise((resolve, reject) => {\n    const imageSource = new Image();\n    imageSource.crossOrigin = 'anonymous';\n    const canvas = document.createElement('canvas');\n    imageSource.onload = () => {\n      canvas.width = imageSource.naturalWidth;\n      canvas.height = imageSource.naturalHeight;\n\n      const context = getContext(canvas);\n      context.drawImage(imageSource, 0, 0, imageSource.naturalWidth, imageSource.naturalHeight);\n\n      resolve(canvas);\n    };\n    imageSource.onerror = () => reject(canvas);\n    imageSource.src = uri;\n  });\n}\n\nexport default {\n  get name(): string {\n    return 'ExpoImageManipulator';\n  },\n  async manipulateAsync(\n    uri: string,\n    actions: Action[] = [],\n    options: SaveOptions\n  ): Promise<ImageResult> {\n    const originalCanvas = await loadImageAsync(uri);\n\n    const resultCanvas = actions.reduce((canvas, action) => {\n      if ('crop' in action) {\n        return crop(canvas, action.crop);\n      } else if ('resize' in action) {\n        return resize(canvas, action.resize);\n      } else if ('flip' in action) {\n        return flip(canvas, action.flip);\n      } else if ('rotate' in action) {\n        return rotate(canvas, action.rotate);\n      } else {\n        return canvas;\n      }\n    }, originalCanvas);\n\n    return getResults(resultCanvas, options);\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}