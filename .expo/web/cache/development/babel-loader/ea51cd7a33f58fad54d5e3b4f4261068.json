{"ast":null,"code":"import { getContext } from \"../utils/getContext.web\";\nfunction sizeFromAngle(width, height, angle) {\n  var radians = angle * Math.PI / 180;\n  var c = Math.cos(radians);\n  var s = Math.sin(radians);\n  if (s < 0) {\n    s = -s;\n  }\n  if (c < 0) {\n    c = -c;\n  }\n  return {\n    width: height * s + width * c,\n    height: height * c + width * s\n  };\n}\nexport default (function (canvas, degrees) {\n  var _sizeFromAngle = sizeFromAngle(canvas.width, canvas.height, degrees),\n    width = _sizeFromAngle.width,\n    height = _sizeFromAngle.height;\n  var result = document.createElement('canvas');\n  result.width = width;\n  result.height = height;\n  var context = getContext(result);\n  context.translate(result.width / 2, result.height / 2);\n  var radians = degrees * Math.PI / 180;\n  context.rotate(radians);\n  context.drawImage(canvas, -canvas.width / 2, -canvas.height / 2, canvas.width, canvas.height);\n  return result;\n});","map":{"version":3,"sources":["../../src/actions/RotateAction.web.ts"],"names":[],"mappings":"AACA,SAAS,UAAU;AAEnB,SAAS,aAAa,CACpB,KAAa,EACb,MAAc,EACd,KAAa,EAAA;EAEb,IAAM,OAAO,GAAI,KAAK,GAAG,IAAI,CAAC,EAAE,GAAI,GAAG;EACvC,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC;EACzB,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC;EACzB,IAAI,CAAC,GAAG,CAAC,EAAE;IACT,CAAC,GAAG,CAAC,CAAC;EACP;EACD,IAAI,CAAC,GAAG,CAAC,EAAE;IACT,CAAC,GAAG,CAAC,CAAC;EACP;EACD,OAAO;IAAE,KAAK,EAAE,MAAM,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC;IAAE,MAAM,EAAE,MAAM,GAAG,CAAC,GAAG,KAAK,GAAG;EAAC,CAAE;AAC1E;AAEA,gBAAe,UAAC,MAAyB,EAAE,OAA+B,EAAI;EAC5E,IAAA,cAAA,GAA0B,aAAa,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC;IAArE,KAAK,GAAA,cAAA,CAAL,KAAK;IAAE,MAAM,GAAA,cAAA,CAAN,MAAM;EAErB,IAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC;EAC/C,MAAM,CAAC,KAAK,GAAG,KAAK;EACpB,MAAM,CAAC,MAAM,GAAG,MAAM;EAEtB,IAAM,OAAO,GAAG,UAAU,CAAC,MAAM,CAAC;EAGlC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;EAGtD,IAAM,OAAO,GAAI,OAAO,GAAG,IAAI,CAAC,EAAE,GAAI,GAAG;EACzC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC;EAGvB,OAAO,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC;EAE7F,OAAO,MAAM;AACf,CAAC","sourcesContent":["import { ActionRotate } from '../ImageManipulator.types';\nimport { getContext } from '../utils/getContext.web';\n\nfunction sizeFromAngle(\n  width: number,\n  height: number,\n  angle: number\n): { width: number; height: number } {\n  const radians = (angle * Math.PI) / 180;\n  let c = Math.cos(radians);\n  let s = Math.sin(radians);\n  if (s < 0) {\n    s = -s;\n  }\n  if (c < 0) {\n    c = -c;\n  }\n  return { width: height * s + width * c, height: height * c + width * s };\n}\n\nexport default (canvas: HTMLCanvasElement, degrees: ActionRotate['rotate']) => {\n  const { width, height } = sizeFromAngle(canvas.width, canvas.height, degrees);\n\n  const result = document.createElement('canvas');\n  result.width = width;\n  result.height = height;\n\n  const context = getContext(result);\n\n  // Set the origin to the center of the image\n  context.translate(result.width / 2, result.height / 2);\n\n  // Rotate the canvas around the origin\n  const radians = (degrees * Math.PI) / 180;\n  context.rotate(radians);\n\n  // Draw the image\n  context.drawImage(canvas, -canvas.width / 2, -canvas.height / 2, canvas.width, canvas.height);\n\n  return result;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}