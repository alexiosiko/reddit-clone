{"ast":null,"code":"import { FlipType, SaveFormat } from \"./ImageManipulator.types\";\nexport function validateArguments(uri, actions, saveOptions) {\n  validateUri(uri);\n  validateActions(actions);\n  validateSaveOptions(saveOptions);\n}\nexport function validateUri(uri) {\n  if (!(typeof uri === 'string')) {\n    throw new TypeError('The \"uri\" argument must be a string');\n  }\n}\nexport function validateActions(actions) {\n  if (!Array.isArray(actions)) {\n    throw new TypeError('The \"actions\" argument must be an array');\n  }\n  for (var action of actions) {\n    if (typeof action !== 'object' || action === null) {\n      throw new TypeError('Action must be an object');\n    }\n    var supportedActionTypes = ['crop', 'flip', 'rotate', 'resize'];\n    var actionKeys = Object.keys(action);\n    if (actionKeys.length !== 1) {\n      throw new TypeError(\"Single action must contain exactly one transformation: \" + supportedActionTypes.join(', '));\n    }\n    var actionType = actionKeys[0];\n    if (!supportedActionTypes.includes(actionType)) {\n      throw new TypeError(\"Unsupported action type: \" + actionType);\n    }\n    if (actionType === 'crop') {\n      validateCropAction(action);\n    } else if (actionType === 'flip') {\n      validateFlipAction(action);\n    } else if (actionType === 'rotate') {\n      validateRotateAction(action);\n    } else if (actionType === 'resize') {\n      validateResizeAction(action);\n    }\n  }\n}\nfunction validateCropAction(action) {\n  var isValid = typeof action.crop === 'object' && action.crop !== null && typeof action.crop.originX === 'number' && typeof action.crop.originY === 'number' && typeof action.crop.width === 'number' && typeof action.crop.height === 'number';\n  if (!isValid) {\n    throw new TypeError('Crop action must be an object of shape { originX: number; originY: number; width: number; height: number }');\n  }\n}\nfunction validateFlipAction(action) {\n  if (typeof action.flip !== 'string' || ![FlipType.Horizontal, FlipType.Vertical].includes(action.flip)) {\n    throw new TypeError(\"Unsupported flip type: \" + action.flip);\n  }\n}\nfunction validateRotateAction(action) {\n  if (typeof action.rotate !== 'number') {\n    throw new TypeError('Rotation must be a number');\n  }\n}\nfunction validateResizeAction(action) {\n  var isValid = typeof action.resize === 'object' && action.resize !== null && (typeof action.resize.width === 'number' || typeof action.resize.width === 'undefined') && (typeof action.resize.height === 'number' || typeof action.resize.height === 'undefined');\n  if (!isValid) {\n    throw new TypeError('Resize action must be an object of shape { width?: number; height?: number }');\n  }\n}\nexport function validateSaveOptions(_ref) {\n  var base64 = _ref.base64,\n    compress = _ref.compress,\n    format = _ref.format;\n  if (base64 !== undefined && typeof base64 !== 'boolean') {\n    throw new TypeError('The \"base64\" argument must be a boolean');\n  }\n  if (compress !== undefined) {\n    if (typeof compress !== 'number') {\n      throw new TypeError('The \"compress\" argument must be a number');\n    }\n    if (compress < 0 || compress > 1) {\n      throw new TypeError('The \"compress\" argument must be a number between 0 and 1');\n    }\n  }\n  var allowedFormats = [SaveFormat.JPEG, SaveFormat.PNG, SaveFormat.WEBP];\n  if (format !== undefined && !allowedFormats.includes(format)) {\n    throw new TypeError(\"The \\\"format\\\" argument must be one of: \" + allowedFormats.join(', '));\n  }\n}","map":{"version":3,"sources":["../src/validators.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Action,\n  ActionCrop,\n  ActionFlip,\n  ActionResize,\n  ActionRotate,\n  FlipType,\n  SaveFormat,\n  SaveOptions,\n} from './ImageManipulator.types';\n\nexport function validateArguments(uri: string, actions: Action[], saveOptions: SaveOptions) {\n  validateUri(uri);\n  validateActions(actions);\n  validateSaveOptions(saveOptions);\n}\n\nexport function validateUri(uri: string): void {\n  if (!(typeof uri === 'string')) {\n    throw new TypeError('The \"uri\" argument must be a string');\n  }\n}\n\nexport function validateActions(actions: Action[]): void {\n  if (!Array.isArray(actions)) {\n    throw new TypeError('The \"actions\" argument must be an array');\n  }\n  for (const action of actions) {\n    if (typeof action !== 'object' || action === null) {\n      throw new TypeError('Action must be an object');\n    }\n    const supportedActionTypes = ['crop', 'flip', 'rotate', 'resize'];\n    const actionKeys = Object.keys(action);\n    if (actionKeys.length !== 1) {\n      throw new TypeError(\n        `Single action must contain exactly one transformation: ${supportedActionTypes.join(', ')}`\n      );\n    }\n    const actionType = actionKeys[0];\n    if (!supportedActionTypes.includes(actionType)) {\n      throw new TypeError(`Unsupported action type: ${actionType}`);\n    }\n\n    if (actionType === 'crop') {\n      validateCropAction(action as ActionCrop);\n    } else if (actionType === 'flip') {\n      validateFlipAction(action as ActionFlip);\n    } else if (actionType === 'rotate') {\n      validateRotateAction(action as ActionRotate);\n    } else if (actionType === 'resize') {\n      validateResizeAction(action as ActionResize);\n    }\n  }\n}\n\nfunction validateCropAction(action: ActionCrop): void {\n  const isValid =\n    typeof action.crop === 'object' &&\n    action.crop !== null &&\n    typeof action.crop.originX === 'number' &&\n    typeof action.crop.originY === 'number' &&\n    typeof action.crop.width === 'number' &&\n    typeof action.crop.height === 'number';\n  if (!isValid) {\n    throw new TypeError(\n      'Crop action must be an object of shape { originX: number; originY: number; width: number; height: number }'\n    );\n  }\n}\n\nfunction validateFlipAction(action: ActionFlip): void {\n  if (\n    typeof action.flip !== 'string' ||\n    ![FlipType.Horizontal, FlipType.Vertical].includes(action.flip)\n  ) {\n    throw new TypeError(`Unsupported flip type: ${action.flip}`);\n  }\n}\n\nfunction validateRotateAction(action: ActionRotate): void {\n  if (typeof action.rotate !== 'number') {\n    throw new TypeError('Rotation must be a number');\n  }\n}\n\nfunction validateResizeAction(action: ActionResize): void {\n  const isValid =\n    typeof action.resize === 'object' &&\n    action.resize !== null &&\n    (typeof action.resize.width === 'number' || typeof action.resize.width === 'undefined') &&\n    (typeof action.resize.height === 'number' || typeof action.resize.height === 'undefined');\n  if (!isValid) {\n    throw new TypeError(\n      'Resize action must be an object of shape { width?: number; height?: number }'\n    );\n  }\n}\n\nexport function validateSaveOptions({ base64, compress, format }: SaveOptions): void {\n  if (base64 !== undefined && typeof base64 !== 'boolean') {\n    throw new TypeError('The \"base64\" argument must be a boolean');\n  }\n  if (compress !== undefined) {\n    if (typeof compress !== 'number') {\n      throw new TypeError('The \"compress\" argument must be a number');\n    }\n    if (compress < 0 || compress > 1) {\n      throw new TypeError('The \"compress\" argument must be a number between 0 and 1');\n    }\n  }\n  const allowedFormats = [SaveFormat.JPEG, SaveFormat.PNG, SaveFormat.WEBP];\n  if (format !== undefined && !allowedFormats.includes(format)) {\n    throw new TypeError(`The \"format\" argument must be one of: ${allowedFormats.join(', ')}`);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}