{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport { palette } from \"../styles/global-styles\";\nimport { useEffect, useState } from \"react\";\nimport Post from \"./Post\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nfunction Posts() {\n  var _useState = useState([{}]),\n    _useState2 = _slicedToArray(_useState, 2),\n    posts = _useState2[0],\n    setPosts = _useState2[1];\n  useEffect(function () {\n    fetchPosts();\n  }, []);\n  useEffect(function () {\n    console.log(posts);\n  }, [posts]);\n  return _jsx(_Fragment, {\n    children: posts && posts.map(function (post) {\n      return _jsx(Post, {\n        title: post.title,\n        description: post.description\n      }, post._id);\n    })\n  });\n  function fetchPosts() {\n    return _fetchPosts.apply(this, arguments);\n  }\n  function _fetchPosts() {\n    _fetchPosts = _asyncToGenerator(function* () {\n      var response = yield fetch(\"http://127.0.0.1:5000/getposts\");\n      if (response.ok == false) throw new Error('Failed to fetch posts');\n      var data = yield response.json();\n      setPosts(data);\n    });\n    return _fetchPosts.apply(this, arguments);\n  }\n  function setPost() {\n    return _setPost.apply(this, arguments);\n  }\n  function _setPost() {\n    _setPost = _asyncToGenerator(function* () {\n      var post = {\n        name: \"alexi\",\n        title: \"Breaking news!\",\n        description: \"A new medicine has just released! Click here blah blah blah blah ... \"\n      };\n      var response = yield fetch(\"http://127.0.0.1:5000/setpost\", {\n        method: \"POST\",\n        body: JSON.stringify(post)\n      });\n      console.log(response);\n      var jsonData = yield response.json();\n    });\n    return _setPost.apply(this, arguments);\n  }\n}\nvar styles = StyleSheet.create({\n  post: {\n    alignSelf: 'center',\n    width: '90%',\n    height: 150,\n    margin: 10,\n    padding: 10,\n    backgroundColor: '#fff'\n  },\n  postText: {\n    color: 'red'\n  },\n  bottom: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignSelf: 'center',\n    position: 'absolute',\n    bottom: 0,\n    height: 20,\n    width: '100%'\n  },\n  bottomItem: {\n    width: '30%',\n    height: '100%',\n    backgroundColor: palette.neutral,\n    bottom: 10\n  }\n});\nexport default Posts;","map":{"version":3,"names":["palette","useEffect","useState","Post","jsx","_jsx","Fragment","_Fragment","Posts","_useState","_useState2","_slicedToArray","posts","setPosts","fetchPosts","console","log","children","map","post","title","description","_id","_fetchPosts","apply","arguments","_asyncToGenerator","response","fetch","ok","Error","data","json","setPost","_setPost","name","method","body","JSON","stringify","jsonData","styles","StyleSheet","create","alignSelf","width","height","margin","padding","backgroundColor","postText","color","bottom","flexDirection","justifyContent","position","bottomItem","neutral"],"sources":["C:/Users/alexi/Documents/Code/react-native/Project/src/frontend/components/Posts.js"],"sourcesContent":["import { View, StyleSheet, Text, TouchableHighlight } from \"react-native\";\r\nimport { palette } from \"../styles/global-styles\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Post from \"./Post\";\r\n\r\nfunction Posts() {\r\n\tconst [posts, setPosts] = useState([{}]);\r\n\t\r\n\tuseEffect(() => {\r\n\t\tfetchPosts();\r\n\t}, [])\r\n\r\n\tuseEffect(() => {\r\n\t\tconsole.log(posts);\r\n\t}, [posts])\r\n\r\n\r\n\treturn (\r\n\t<>\r\n\t\t{posts && posts.map(post => (\r\n\t\t\t<Post key={post._id} title={post.title} description={post.description} />\r\n\t\t))}\r\n\t</>)\r\n\r\n\tasync function fetchPosts() {\r\n\t\tconst response = await fetch(\"http://127.0.0.1:5000/getposts\");\r\n\t\tif (response.ok == false)\r\n\t\t\tthrow new Error('Failed to fetch posts');\r\n\t\tconst data = await response.json();\r\n\t\tsetPosts(data);\r\n\t}\r\n\tasync function setPost() {\r\n\t\tconst post = {\r\n\t\t\tname: \"alexi\",\r\n\t\t\ttitle: \"Breaking news!\",\r\n\t\t\tdescription: \"A new medicine has just released! Click here blah blah blah blah ... \"\r\n\t\t}\r\n\t\tconst response = await fetch(\"http://127.0.0.1:5000/setpost\",\r\n\t\t\t{ \r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t  \tbody: JSON.stringify(post) \r\n\t\t\t});\r\n\t\t\tconsole.log(response);\r\n\t\tconst jsonData = await response.json();\r\n\t}\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    post: { \r\n        alignSelf: 'center',\r\n        width: '90%',\r\n        height: 150,\r\n        margin: 10,\r\n        padding: 10,\r\n        backgroundColor: '#fff',\r\n    },\r\n    postText: {\r\n        color: 'red',\r\n    },\r\n    bottom: { \r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between',\r\n        alignSelf: 'center',\r\n        position: 'absolute',\r\n        bottom: 0,\r\n        height: 20,\r\n        width: '100%',\r\n    },\r\n    bottomItem: {\r\n        width: '30%',\r\n        height: '100%',\r\n        backgroundColor: palette.neutral,\r\n        bottom: 10,\r\n    }\r\n})\r\nexport default Posts;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}