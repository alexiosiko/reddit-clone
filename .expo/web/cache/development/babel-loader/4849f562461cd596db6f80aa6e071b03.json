{"ast":null,"code":"import { CodedError } from 'expo-modules-core';\nimport { getContext } from \"../utils/getContext.web\";\nexport default (function (canvas, options) {\n  var _options$originX = options.originX,\n    originX = _options$originX === void 0 ? 0 : _options$originX,\n    _options$originY = options.originY,\n    originY = _options$originY === void 0 ? 0 : _options$originY,\n    _options$width = options.width,\n    width = _options$width === void 0 ? 0 : _options$width,\n    _options$height = options.height,\n    height = _options$height === void 0 ? 0 : _options$height;\n  var clamp = function clamp(value, max) {\n    return Math.max(0, Math.min(max, value));\n  };\n  width = clamp(width, canvas.width);\n  height = clamp(height, canvas.height);\n  originX = clamp(originX, canvas.width);\n  originY = clamp(originY, canvas.height);\n  width = Math.min(originX + width, canvas.width) - originX;\n  height = Math.min(originY + height, canvas.height) - originY;\n  if (width === 0 || height === 0) {\n    throw new CodedError('ERR_IMAGE_MANIPULATOR_CROP', 'Crop size must be greater than 0: ' + JSON.stringify(options, null, 2));\n  }\n  var result = document.createElement('canvas');\n  result.width = width;\n  result.height = height;\n  var context = getContext(result);\n  context.drawImage(canvas, originX, originY, width, height, 0, 0, width, height);\n  return result;\n});","map":{"version":3,"sources":["../../src/actions/CropAction.web.ts"],"names":[],"mappings":"AAAA,SAAS,UAAU,QAAQ,mBAAmB;AAG9C,SAAS,UAAU;AAEnB,gBAAe,UAAC,MAAyB,EAAE,OAA2B,EAAI;EAExE,IAAA,gBAAA,GAA0D,OAAO,CAA3D,OAAO;IAAP,OAAO,GAAA,gBAAA,cAAG,CAAC,GAAA,gBAAA;IAAA,gBAAA,GAAyC,OAAO,CAA9C,OAAO;IAAP,OAAO,GAAA,gBAAA,cAAG,CAAC,GAAA,gBAAA;IAAA,cAAA,GAA4B,OAAO,CAAjC,KAAK;IAAL,KAAK,GAAA,cAAA,cAAG,CAAC,GAAA,cAAA;IAAA,eAAA,GAAiB,OAAO,CAAtB,MAAM;IAAN,MAAM,GAAA,eAAA,cAAG,CAAC,GAAA,eAAA;EACrD,IAAM,KAAK,GAAG,SAAR,KAAK,CAAI,KAAK,EAAE,GAAG;IAAA,OAAK,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;EAAA;EAE/D,KAAK,GAAG,KAAK,CAAC,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC;EAClC,MAAM,GAAG,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC;EACrC,OAAO,GAAG,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,KAAK,CAAC;EACtC,OAAO,GAAG,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,MAAM,CAAC;EAGvC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,GAAG,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,OAAO;EACzD,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,GAAG,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,GAAG,OAAO;EAE5D,IAAI,KAAK,KAAK,CAAC,IAAI,MAAM,KAAK,CAAC,EAAE;IAC/B,MAAM,IAAI,UAAU,CAClB,4BAA4B,EAC5B,oCAAoC,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CACxE;EACF;EAED,IAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC;EAC/C,MAAM,CAAC,KAAK,GAAG,KAAK;EACpB,MAAM,CAAC,MAAM,GAAG,MAAM;EAEtB,IAAM,OAAO,GAAG,UAAU,CAAC,MAAM,CAAC;EAClC,OAAO,CAAC,SAAS,CAAC,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC;EAE/E,OAAO,MAAM;AACf,CAAC","sourcesContent":["import { CodedError } from 'expo-modules-core';\n\nimport { ActionCrop } from '../ImageManipulator.types';\nimport { getContext } from '../utils/getContext.web';\n\nexport default (canvas: HTMLCanvasElement, options: ActionCrop['crop']) => {\n  // ensure values are defined.\n  let { originX = 0, originY = 0, width = 0, height = 0 } = options;\n  const clamp = (value, max) => Math.max(0, Math.min(max, value));\n  // lock within bounds.\n  width = clamp(width, canvas.width);\n  height = clamp(height, canvas.height);\n  originX = clamp(originX, canvas.width);\n  originY = clamp(originY, canvas.height);\n\n  // lock sum of crop.\n  width = Math.min(originX + width, canvas.width) - originX;\n  height = Math.min(originY + height, canvas.height) - originY;\n\n  if (width === 0 || height === 0) {\n    throw new CodedError(\n      'ERR_IMAGE_MANIPULATOR_CROP',\n      'Crop size must be greater than 0: ' + JSON.stringify(options, null, 2)\n    );\n  }\n\n  const result = document.createElement('canvas');\n  result.width = width;\n  result.height = height;\n\n  const context = getContext(result);\n  context.drawImage(canvas, originX, originY, width, height, 0, 0, width, height);\n\n  return result;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}